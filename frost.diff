diff --git a/cron/apple_daily_build.py b/cron/apple_daily_build.py
index d24d9d1..c7ea081 100755
--- a/cron/apple_daily_build.py
+++ b/cron/apple_daily_build.py
@@ -349,12 +349,19 @@ num_date_args = len(args)
 if num_date_args == 0:
     #start_date = datetime.now() - relativedelta(days=days_ago)
     start_date = datetime.now()
-elif num_date_args in (3,6):
+elif num_date_args in (3,4,5,6):
     year = int(args[0])
     month = int(args[1])
     day = int(args[2])
     start_date = datetime(year,month,day)
-    if num_date_args == 6:
+    if num_date_args == 4:
+        day = int(args[3])
+        end_date = datetime(year,month,day)
+    elif num_date_args == 5:
+        month = int(args[3])
+        day = int(args[4])
+        end_date = datetime(year,month,day)
+    elif num_date_args == 6:
         year = int(args[3])
         month = int(args[4])
         day = int(args[5])
diff --git a/cron/build_apple_stage_grids.py b/cron/build_apple_stage_grids.py
index 853faae..59f5e7f 100755
--- a/cron/build_apple_stage_grids.py
+++ b/cron/build_apple_stage_grids.py
@@ -91,7 +91,7 @@ elif num_args in (3,4,6):
     start_date = datetime.datetime(year,month,day)
     if num_args == 3: end_date = None
     elif num_args == 4:
-        end_date = start_date + relativedelta(days=int(args[4])-1)
+        end_date = datetime.datetime(year,month,int(args[4]))
     elif num_args == 6:
         year = int(args[4])
         month = int(args[5])
@@ -162,6 +162,8 @@ del temp_reader
 
 # need to save the indexes where NANs occur in mint
 mint_nan_indexes = N.where(N.isnan(mint))
+if verbose:
+    print '\n min temp :', mint.shape, ': nans =', len(mint_nan_indexes[0]), 'of ', N.prod(mint.shape)
 
 # get a Variety grid manager for the target year
 filepath = factory.getVarietyFilePath(target_year, variety, test_file)
@@ -176,7 +178,7 @@ else: # create a new Variety grid file
 
 # save the temperature grid to the variety grid file
 variety_manager.close()
-if verbose:
+if debug:
     print 'Min Temp @ in degrees F node[%d,%d] :' % midpoint
     if end_date is None: print mint[y,x]
     else:    print mint[:,y,x]
@@ -193,8 +195,9 @@ for model_name in models:
     accumulated_chill = chill_manager.getChill(model_name, 'accumulated',
                                                start_date, end_date)
     if verbose:
-        print '\nchill accumulation :', accumulated_chill.shape
-        print accumulated_chill[N.where(accumulated_chill > 0)]
+        num_zeros = len(N.where(accumulated_chill == 0)[0])
+        print '\nchill accumulation :', accumulated_chill.shape, ': zeros =', num_zeros, 'of ', N.prod(accumulated_chill.shape)
+    if debug: print accumulated_chill[N.where(accumulated_chill > 0)], '\n'
 
     #  loop trough all GDD thresholds
     for lo_gdd_th, hi_gdd_th in gdd_thresholds:
@@ -204,8 +207,9 @@ for model_name in models:
         daily_gdd = chill_manager.getGdd(lo_gdd_th, hi_gdd_th,
                                          start_date, end_date)
         if verbose:
-            print '\ndaily_gdd (from chill manager) :', daily_gdd.shape
-            print daily_gdd[N.where(accumulated_chill > 0)]
+            num_zeros = len(N.where(daily_gdd == 0)[0])
+            print 'daily_gdd (from chill manager) :', daily_gdd.shape, ': zeros =', num_zeros, 'of ', N.prod(daily_gdd.shape)
+        if debug: print daily_gdd[N.where(accumulated_chill > 0)], '\n'
 
         # calculuate accumulated GDD from daily gdd
         # let GDD manger get accumulated GDD for previous day
@@ -220,8 +224,11 @@ for model_name in models:
         del daily_gdd
 
         if verbose:
+            num_zeros = len(N.where(accumulated_gdd == 0)[0])
+            print 'accumulated_gdd :', accumulated_gdd.shape, ': zeros =', num_zeros, 'of ', N.prod(accumulated_gdd.shape)
+        if debug:
             print '\nnodes with GDD accumulation > 0 :',
-            print accumulated_gdd[N.where(accumulated_gdd > 0)]
+            print accumulated_gdd[N.where(accumulated_gdd > 0)], '\n'
 
         if update_db:
             subgroup = '%s.gdd' % model_group
@@ -242,10 +249,14 @@ for model_name in models:
 
         # generate stage grid from accumulated GDD
         stage_grid = variety_manager.gddToStages(accumulated_gdd)
+        if verbose:
+            print '\n', variety_titled, 'stage grid :', stage_grid.shape, 'total nodes =', N.prod(stage_grid.shape)
+            print '            stage  > 0 =', len(N.where(stage_grid > 0)[0])
+            print '            stage == 0 =', len(N.where(stage_grid == 0)[0])
         # no longer need grid for accumulated GDD
         del accumulated_gdd
 
-        if verbose:
+        if debug:
             print '\nnodes with stage > 0 :'
             print stage_grid[N.where(stage_grid > 0)]
 
@@ -266,12 +277,16 @@ for model_name in models:
     
         # estimate kill probability from stages and predicted mint
         kill_grid = variety_manager.estimateKill(stage_grid, mint)
+        if verbose:
+            print '\n', variety_titled, 'kill grid :', kill_grid.shape, 'total nodes =', N.prod(kill_grid.shape)
+            print '            kill  > 0 =', len(N.where(kill_grid > 0)[0])
+            print '            kill == 0 =', len(N.where(kill_grid == 0)[0])
         # no longer need stage grid
         del stage_grid
 
-        if verbose:
+        if debug:
             print '\nnodes with kill probability > 0 :'
-            print kill_grid[N.where(kill_grid > 0)]
+            print kill_grid[N.where(kill_grid > 0)], '\n'
 
         if update_db:
             subgroup = '%s.kill' % model_group
diff --git a/cron/draw_temparature_maps.py b/cron/draw_temparature_maps.py
deleted file mode 100755
index 4b5b897..0000000
--- a/cron/draw_temparature_maps.py
+++ /dev/null
@@ -1,107 +0,0 @@
-#! /Volumes/projects/venvs/frost/bin/python
-
-import os, sys
-
-from datetime import datetime
-from dateutil.relativedelta import relativedelta
-ONE_DAY = relativedelta(days=1)
-
-import numpy as N
-
-from atmosci.utils.timeutils import asAcisQueryDate
-
-from frost.factory import FrostGridFactory
-from frost.functions import fromConfig, nameToFilepath, tempPlotDir
-
-from frost.visual.maps import plot_bound, drawFilledContours
-
-# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
-
-TEMP_NAMES = { 'mint':'Minimum', 'maxt':'Maximum', 'avgt':'Average' }
-
-# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
-
-from optparse import OptionParser
-parser = OptionParser()
-
-parser.add_option('-u', action='store', type='string', dest='units',
-                  default='F')
-parser.add_option('-v', action='store_true', dest='verbose', default=False)
-parser.add_option('-z', action='store_true', dest='test_file', default=False)
-
-options, args = parser.parse_args()
-
-# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
-
-test_file = options.test_file
-units = options.units
-verbose = options.verbose
-
-temp_path = args[0]
-temp_group, temp_type = temp_path.split('.')
-
-# get the date
-date_args = len(args[1:])
-if date_args >= 3:
-    year = int(args[1])
-    month = int(args[2])
-    day = int(args[3])
-    start_date = datetime(year,month,day)
-    if date_args == 3: end_date = None
-    elif date_args == 4:
-        end_date = start_date + relativedelta(days=int(args[4])-1)
-    elif date_args == 6:
-        year = int(args[4])
-        month = int(args[5])
-        day = int(args[6])
-        end_date = datetime(year,month,day)
-    else:
-        errmsg = 'Invalid number of date arguments (%d).' % date_args
-        raise ValueError, errmsg
-else:
-    errmsg = 'Invalid number of date arguments (%d).' % date_args
-    raise ValueError, errmsg
-
-factory = FrostGridFactory()
-target_year = factory.getTargetYear(start_date)
-
-# create the map filepath template
-template = '%%s-Frost-%s-%s-Map.png' % (temp_group.title(), temp_type.title())
-map_dirpath = tempPlotDir(target_year, temp_group, temp_type, 'maps')
-map_filepath = map_dirpath + os.sep + template
-
-# create the map title tmplate
-title_units = chr(176) + units
-title = u"%s Temperature\n%%-.f < %s > %%-.F" % ( TEMP_NAMES[temp_type],
-                                                  title_units.decode('latin1') )
-
-# get temp manager and lot, lon data
-manager = factory.getTempGridManager(target_year, 'r', test_file)
-lats = manager.lats
-lons = manager.lons
-
-map_options = { 'area':'northeast', 'titleyoffset': 0.165, #'apply_mask':False,
-                'cmap':'jet', 'colorbar':True, }
-
-temp = manager.getTemp(temp_path, start_date, end_date, units=units)
-
-if end_date is None:
-    map_options['autobounds'] = True
-    map_options['date'] = start_date
-    map_options['title'] = title
-    map_options['outputfile'] = map_filepath % asAcisQueryDate(start_date)
-
-    drawFilledContours(temp, lats, lons, **map_options)
-else:
-    map_options['contourbounds'] = plot_bound(temp, 20)
-
-    num_days = (end_date - start_date).days + 1
-    for day in range(num_days):
-        date = start_date + relativedelta(days=day)
-        map_options['date'] = date
-        map_options['outputfile'] = map_filepath % asAcisQueryDate(date)
-
-        day_temps = temp[day]
-        map_options['title'] = title % (N.nanmin(day_temps),N.nanmax(day_temps))
-        drawFilledContours(day_temps, lats, lons, **map_options)
-
diff --git a/cron/grape_daily_build.py b/cron/grape_daily_build.py
index 03c10c4..0c34a60 100755
--- a/cron/grape_daily_build.py
+++ b/cron/grape_daily_build.py
@@ -364,12 +364,19 @@ elif num_date_args == 1:
     end_date = datetime(target_year, *GRAPE.end_day)
     if end_date > datetime.now():
         end_date = datetime.now() - ONE_DAY
-elif num_date_args in (3,6):
+elif num_date_args in (3,4,5,6):
     year = int(args[0])
     month = int(args[1])
     day = int(args[2])
     start_date = datetime(year,month,day)
-    if num_date_args == 6:
+    if num_date_args == 4:
+        day = int(args[3])
+        end_date = datetime(year,month,day)
+    elif num_date_args == 5:
+        month = int(args[3])
+        day = int(args[4])
+        end_date = datetime(year,month,day)
+    elif num_date_args == 6:
         year = int(args[3])
         month = int(args[4])
         day = int(args[5])
diff --git a/frost/apple/scripts/apple_daily_build.py b/frost/apple/scripts/apple_daily_build.py
index 9e27128..c7ea081 100755
--- a/frost/apple/scripts/apple_daily_build.py
+++ b/frost/apple/scripts/apple_daily_build.py
@@ -10,7 +10,7 @@ from dateutil.relativedelta import relativedelta
 from atmosci.utils.report import Reporter
 
 from frost.functions import fromConfig, buildLogFilepath 
-from frost.functions import seasonDate, targetYearFromDate
+from frost.functions import seasonDate, targetYearFromDate, targetDateSpan
 
 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 
@@ -71,11 +71,10 @@ class ProcessServer(object):
         for variety in varieties:
             if publish_maps:
                 scripts.append( ('publish_maps', (variety, 'carolina')) )
+                scripts.append( ('animate', (variety, 'carolina', 'kill')) )
+                scripts.append( ('animate', (variety, 'carolina', 'stage')) )
+                scripts.append( ('animate', (variety, 'carolina', 'gdd')) )
             for model in chill_models:
-                if publish_maps:
-                    scripts.append( ('animate', (variety, model, 'kill')) )
-                    scripts.append( ('animate', (variety, model, 'stage')) )
-                    scripts.append( ('animate', (variety, model, 'gdd')) )
                 if draw_maps:
                     scripts.append( ('kill_map', (variety, model)) )
                     scripts.append( ('stage_map', (variety, model)) )
@@ -99,10 +98,12 @@ class ProcessServer(object):
         self.frost_date = date
         self.frost_date_arg = date.strftime('%Y %m %d')
         self.frost_date_str = date.strftime('%B %d, %Y')
-        self.temp_date = date + ONE_DAY
+        #self.temp_date = date + ONE_DAY
+        self.temp_date = self.frost_date
+        self.temp_date_str = self.frost_date_str
         self.process_queue = list(self.all_scripts)
         if debug:
-            print '\nrun process queue', self.frost_date_arg
+            print '\nrun process queue', self.frost_date_arg,
             print self.process_queue
 
         keep_on_trucking = True
@@ -197,7 +198,7 @@ class ProcessServer(object):
     def initiateDrawChillMaps(self, model):
         if self.debug:
             date = self.frost_date_str
-            print '\ninitiateDrawChillMaps', variety, date
+            print '\ninitiateDrawChillMaps', model, date
             self.reporter.logInfo(CALL_MSG % ('initiateDrawChillMaps', date))
         if self.test_run: return DummyProcess()
         script = 'draw_apple_chill_maps.py'
@@ -309,10 +310,13 @@ options, args = parser.parse_args()
 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
 
 build_grids = options.build_grids
+days_ago = options.days_ago
 download_temps = options.download_temps
 draw_maps = options.draw_maps
 num_days = options.num_days
-publish_maps = options.publish_maps
+if draw_maps:
+    publish_maps = options.publish_maps
+else: publish_maps = False
 
 debug = options.debug
 test_run = options.test_run
@@ -343,13 +347,21 @@ else:
 end_date = None 
 num_date_args = len(args)
 if num_date_args == 0:
-    start_date = datetime.now() - relativedelta(days=options.days_ago)
-elif num_date_args in (3,6):
+    #start_date = datetime.now() - relativedelta(days=days_ago)
+    start_date = datetime.now()
+elif num_date_args in (3,4,5,6):
     year = int(args[0])
     month = int(args[1])
     day = int(args[2])
     start_date = datetime(year,month,day)
-    if num_date_args == 6:
+    if num_date_args == 4:
+        day = int(args[3])
+        end_date = datetime(year,month,day)
+    elif num_date_args == 5:
+        month = int(args[3])
+        day = int(args[4])
+        end_date = datetime(year,month,day)
+    elif num_date_args == 6:
         year = int(args[3])
         month = int(args[4])
         day = int(args[5])
@@ -358,11 +370,14 @@ else:
     print sys.argv
     errmsg = 'Invalid number of date arguments (%d).' % num_date_args
     raise ValueError, errmsg
-target_year = targetYearFromDate(start_date)
-if target_year is None: exit()
+target_year = targetYearFromDate(start_date, 'apple')
+season_start, season_end = targetDateSpan(target_year, 'apple')
 
+if start_date > season_end: sys.exit(0)
 if end_date is None:
     end_date = start_date + relativedelta(days=num_days-1)
+if end_date <= season_start: sys.exit(0)
+if start_date < season_start: start_date = season_start
 
 log_filepath = options.log_filepath
 if log_filepath is None:
diff --git a/frost/apple/scripts/build_apple_stage_grids.py b/frost/apple/scripts/build_apple_stage_grids.py
index 0759e57..59f5e7f 100755
--- a/frost/apple/scripts/build_apple_stage_grids.py
+++ b/frost/apple/scripts/build_apple_stage_grids.py
@@ -4,7 +4,7 @@ import os, sys
 import re
 import warnings
 
-from datetime import datetime
+import datetime
 from dateutil.relativedelta import relativedelta
 ONE_DAY = relativedelta(days=1)
 
@@ -50,7 +50,6 @@ parser.add_option('-d', action='store_false', dest='download_mint',
                    default=True)
 parser.add_option('-f', action='store_true', dest='forecast', default=False)
 parser.add_option('-g', action='store_false', dest='calc_gdd', default=True)
-parser.add_option('-s', action='store_true', dest='sub_process', default=False)
 parser.add_option('-u', action='store_false', dest='update', default=True)
 parser.add_option('-v', action='store_true', dest='verbose', default=False)
 parser.add_option('-y', action='store_true', dest='test_file', default=False)
@@ -65,13 +64,10 @@ calc_gdd = options.calc_gdd
 debug = options.debug
 download_mint = options.download_mint
 forecast = options.forecast
-sub_process = options.sub_process
 test_file = options.test_file
 verbose = options.verbose or debug
 update_db = options.update
 
-if sub_process: print sys.argv
-
 variety = getAppleVariety(args[0])
 
 factory = AppleGridFactory()
@@ -84,23 +80,23 @@ if num_args == 1:
 elif num_args == 2:
     year = int(args[1])
     month = int(args[2])
-    start_date = datetime(year,month,1)
+    start_date = datetime.datetime(year,month,1)
     last_day = lastDayOfMonth(year, month)
-    end_date = datetime(year, month, last_day)
+    end_date = datetime.datetime(year, month, last_day)
     target_year = factory.getTargetYear(start_date)
 elif num_args in (3,4,6):
     year = int(args[1])
     month = int(args[2])
     day = int(args[3])
-    start_date = datetime(year,month,day)
+    start_date = datetime.datetime(year,month,day)
     if num_args == 3: end_date = None
     elif num_args == 4:
-        end_date = start_date + relativedelta(days=int(args[4])-1)
+        end_date = datetime.datetime(year,month,int(args[4]))
     elif num_args == 6:
         year = int(args[4])
         month = int(args[5])
         day = int(args[6])
-        end_date = datetime(year,month,day)
+        end_date = datetime.datetime(year,month,day)
     target_year = factory.getTargetYear(start_date)
 else:
     print sys.argv
@@ -108,6 +104,11 @@ else:
     raise ValueError, errmsg
 if target_year is None: exit()
 
+# in case script goes haywire
+max_valid_date = datetime.date.today() - ONE_DAY
+max_valid_str = max_valid_date.strftime('%Y-%m-%d')
+
+
 # filter annoying numpy warnings
 warnings.filterwarnings('ignore',"All-NaN axis encountered")
 warnings.filterwarnings('ignore',"All-NaN slice encountered")
@@ -130,6 +131,8 @@ if start_date is None:
     start_date = chill_manager.start_date
     end_date = chill_manager.end_date
 
+print 'start/end date :', start_date, end_date
+
 if options.models is None:
     models = [name.lower() for name in chill_manager.file_chill_models]
 elif options.models == 'all':
@@ -145,8 +148,6 @@ y, x = midpoint
 
 # get mint from temperature file
 temp_reader = factory.getTempGridReader(target_year, test_file)
-if verbose:
-    print 'temps filepath', temp_reader.filepath
 if forecast:
     mint = temp_reader.getTemp('forecast.mint', start_date, end_date)
 else:
@@ -161,11 +162,11 @@ del temp_reader
 
 # need to save the indexes where NANs occur in mint
 mint_nan_indexes = N.where(N.isnan(mint))
+if verbose:
+    print '\n min temp :', mint.shape, ': nans =', len(mint_nan_indexes[0]), 'of ', N.prod(mint.shape)
 
 # get a Variety grid manager for the target year
 filepath = factory.getVarietyFilePath(target_year, variety, test_file)
-if verbose:
-    print variety.name, 'filepath', filepath
 if os.path.exists(filepath):
     variety_manager = \
     factory.getVarietyGridManager(target_year, variety, 'a', test_file)
@@ -177,7 +178,7 @@ else: # create a new Variety grid file
 
 # save the temperature grid to the variety grid file
 variety_manager.close()
-if verbose:
+if debug:
     print 'Min Temp @ in degrees F node[%d,%d] :' % midpoint
     if end_date is None: print mint[y,x]
     else:    print mint[:,y,x]
@@ -194,17 +195,21 @@ for model_name in models:
     accumulated_chill = chill_manager.getChill(model_name, 'accumulated',
                                                start_date, end_date)
     if verbose:
-        print '\nchill accumulation',
-        print accumulated_chill[N.where(accumulated_chill > 0)]
+        num_zeros = len(N.where(accumulated_chill == 0)[0])
+        print '\nchill accumulation :', accumulated_chill.shape, ': zeros =', num_zeros, 'of ', N.prod(accumulated_chill.shape)
+    if debug: print accumulated_chill[N.where(accumulated_chill > 0)], '\n'
 
     #  loop trough all GDD thresholds
     for lo_gdd_th, hi_gdd_th in gdd_thresholds:
+        model_group = '%s.L%dH%d' % (model_name.title(), lo_gdd_th, hi_gdd_th)
+
         # get daily GDD from the chill grid file
         daily_gdd = chill_manager.getGdd(lo_gdd_th, hi_gdd_th,
                                          start_date, end_date)
         if verbose:
-            print '\ndaily GDD (from chill manager)',
-            print accumulated_chill[N.where(accumulated_chill > 0)]
+            num_zeros = len(N.where(daily_gdd == 0)[0])
+            print 'daily_gdd (from chill manager) :', daily_gdd.shape, ': zeros =', num_zeros, 'of ', N.prod(daily_gdd.shape)
+        if debug: print daily_gdd[N.where(accumulated_chill > 0)], '\n'
 
         # calculuate accumulated GDD from daily gdd
         # let GDD manger get accumulated GDD for previous day
@@ -214,51 +219,91 @@ for model_name in models:
         variety_manager.accumulateGdd(model_name, lo_gdd_th, hi_gdd_th,
                                       start_date, accumulated_chill, daily_gdd)
         variety_manager.close()
+
         # no longer need grid for daily GDD
         del daily_gdd
 
         if verbose:
-            print '\nGDD accumulation',
-            print accumulated_gdd[N.where(accumulated_gdd > 0)]
+            num_zeros = len(N.where(accumulated_gdd == 0)[0])
+            print 'accumulated_gdd :', accumulated_gdd.shape, ': zeros =', num_zeros, 'of ', N.prod(accumulated_gdd.shape)
+        if debug:
+            print '\nnodes with GDD accumulation > 0 :',
+            print accumulated_gdd[N.where(accumulated_gdd > 0)], '\n'
 
         if update_db:
+            subgroup = '%s.gdd' % model_group
             variety_manager.open('a')
             variety_manager.updateGdd(model_name, lo_gdd_th, hi_gdd_th,
                                       accumulated_gdd, chill_mask, start_date)
+            last_valid = variety_manager.getDatasetAttribute('%s.accumulated' % subgroup, 'last_valid_date')
             variety_manager.close()
             print 'updated', variety_titled, model_titled, 'accumulated gdd'
 
+            last_valid = datetime.date(*tuple([int(d) for d in last_valid.split('-')]))
+            if last_valid > max_valid_date:
+                variety_manager.open('a')
+                variety_manager.setDatasetAttribute('%s.accumulated' % subgroup, 'last_valid_date', max_valid_str)
+                variety_manager.setDatasetAttribute('%s.chill_mask' % subgroup, 'last_valid_date', max_valid_str)
+                variety_manager.setDatasetAttribute('%s.provenance' % subgroup, 'last_valid_date', max_valid_str)
+                variety_manager.close()
+
         # generate stage grid from accumulated GDD
         stage_grid = variety_manager.gddToStages(accumulated_gdd)
+        if verbose:
+            print '\n', variety_titled, 'stage grid :', stage_grid.shape, 'total nodes =', N.prod(stage_grid.shape)
+            print '            stage  > 0 =', len(N.where(stage_grid > 0)[0])
+            print '            stage == 0 =', len(N.where(stage_grid == 0)[0])
         # no longer need grid for accumulated GDD
         del accumulated_gdd
 
-        if verbose:
-            print '\nstage set to',
+        if debug:
+            print '\nnodes with stage > 0 :'
             print stage_grid[N.where(stage_grid > 0)]
 
         if update_db:
+            subgroup = '%s.stage' % model_group
             variety_manager.open('a')
-            variety_manager.updateStage(model_name, lo_gdd_th, hi_gdd_th,
-                                        stage_grid, start_date)
+            variety_manager.updateStage(model_name, lo_gdd_th, hi_gdd_th, stage_grid, start_date)
+            last_valid = variety_manager.getDatasetAttribute('%s.index' % subgroup, 'last_valid_date')
             variety_manager.close()
             print 'updated', variety_titled, model_titled, 'stage'
+
+            last_valid = datetime.date(*tuple([int(d) for d in last_valid.split('-')]))
+            if last_valid > max_valid_date:
+                variety_manager.open('a')
+                variety_manager.setDatasetAttribute('%s.index' % subgroup, 'last_valid_date', max_valid_str)
+                variety_manager.setDatasetAttribute('%s.provenance' % subgroup, 'last_valid_date', max_valid_str)
+                variety_manager.close()
     
         # estimate kill probability from stages and predicted mint
         kill_grid = variety_manager.estimateKill(stage_grid, mint)
+        if verbose:
+            print '\n', variety_titled, 'kill grid :', kill_grid.shape, 'total nodes =', N.prod(kill_grid.shape)
+            print '            kill  > 0 =', len(N.where(kill_grid > 0)[0])
+            print '            kill == 0 =', len(N.where(kill_grid == 0)[0])
         # no longer need stage grid
         del stage_grid
 
-        if verbose:
-            print '\nkill probability',
-            print kill_grid[N.where(kill_grid > 0)]
+        if debug:
+            print '\nnodes with kill probability > 0 :'
+            print kill_grid[N.where(kill_grid > 0)], '\n'
 
         if update_db:
+            subgroup = '%s.kill' % model_group
             variety_manager.open('a')
             variety_manager.updateKill(model_name, lo_gdd_th, hi_gdd_th,
                                        kill_grid, start_date)
+            last_valid = variety_manager.getDatasetAttribute('%s.level' % subgroup, 'last_valid_date')
             variety_manager.close()
             print 'updated', variety_titled, model_titled, 'kill'
+
+            last_valid = datetime.date(*tuple([int(d) for d in last_valid.split('-')]))
+            if last_valid > max_valid_date:
+                variety_manager.open('a')
+                variety_manager.setDatasetAttribute('%s.level' % subgroup, 'last_valid_date', max_valid_str)
+                variety_manager.setDatasetAttribute('%s.provenance' % subgroup, 'last_valid_date', max_valid_str)
+                variety_manager.close()
+
         # no longer need grid for kill
         del kill_grid
 
